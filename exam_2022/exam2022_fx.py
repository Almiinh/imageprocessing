# -*- coding: utf-8 -*-
"""exam2022_fx.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vRS6jiQBScU5R2LLSfOmM7oxMTNf6PRm
"""

# Commented out IPython magic to ensure Python compatibility.
import cv2         
# %matplotlib inline               
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# from google.colab.patches import cv2_imshow

from skimage.measure import label, perimeter_crofton
from skimage.morphology import binary_closing, binary_opening
from skimage.morphology import disk

image1 = cv2.imread('blood_ezm.png')
img = cv2.cvtColor(image1, cv2.COLOR_BGR2GRAY)

ret, IMG = cv2.threshold(img, 255, 255, cv2.THRESH_OTSU)     
plt.imshow(image1) 
plt.show()
plt.imshow(IMG,'gray') 
plt.show()

LABEL = label(255-IMG)
plt.imshow(3*255*LABEL/np.max(LABEL)/4 + (255-IMG)/4,'gray') 
np.max(LABEL)

N = np.max(LABEL)
data = np.zeros((N-1,3))
for k in range(1,N):
    data[k-1,0] = np.sum(LABEL == k)
    data[k-1,1] = perimeter_crofton(LABEL == k, directions=4)
    data[k-1,2] = 2*np.pi*np.sqrt(data[k-1,0]/np.pi)/data[k-1,1]

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
x = data[:,0]
y = data[:,1]
z = data[:,2]
ax.scatter(x, y, z, c='r', marker='o')
ax.set_xlabel('Area')
ax.set_ylabel('Perimeter')
ax.set_zlabel('Circularity')
ax.view_init(elev=30, azim=60)
plt.show()

R = np.zeros(LABEL.shape)
for k in range(1,N):
    if data[k-1,2] > .95:
        R = R + (LABEL == k)*2
    else:
        R = R + (LABEL == k)
plt.imshow(R)

print('Cellule saine:',np.sum(data[:,2] > .95))
print('Cellule malade:',np.sum(data[:,2] <= .95))

"""**HARD MODE**"""

image1 = cv2.imread('blood_hm.png')
img = cv2.cvtColor(image1, cv2.COLOR_BGR2GRAY)
IMG = cv2.adaptiveThreshold(img,255,cv2.ADAPTIVE_THRESH_MEAN_C,cv2.THRESH_BINARY,255,20) 

LABEL = label(255-IMG)
h1 = np.unique(LABEL[:,0])
for k in h1:
  if k > 0:
    LABEL[LABEL==k] = 0
h1 = np.unique(LABEL[:,-1])
for k in h1:
  if k > 0:
    LABEL[LABEL==k] = 0
h1 = np.unique(LABEL[0,:])
for k in h1:
  if k > 0:
    LABEL[LABEL==k] = 0
h1 = np.unique(LABEL[-1,:])
for k in h1:
  if k > 0:
    LABEL[LABEL==k] = 0

LABEL = label(LABEL > 0)

N = np.max(LABEL)
data = np.zeros((N-1,3))
for k in range(1,N):
    data[k-1,0] = np.sum(LABEL == k)
    data[k-1,1] = perimeter_crofton(LABEL == k, directions=16)
    data[k-1,2] = 2*np.pi*np.sqrt(data[k-1,0]/np.pi)/data[k-1,1]

R = np.zeros(LABEL.shape)
for k in range(1,N):
    if data[k-1,2] > .98:
        R = R + (LABEL == k)*2
    else:
        R = R + (LABEL == k)


plt.imshow(image1,'gray') 
plt.show()
plt.imshow(IMG,'gray') 
plt.show()
plt.imshow(3*255*LABEL/np.max(LABEL)/4 + (255-IMG*(LABEL>0))/4,'gray') 
plt.show()

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
x = data[:,0]
y = data[:,1]
z = data[:,2]
ax.scatter(x, y, z, c='r', marker='o')
ax.set_xlabel('Area')
ax.set_ylabel('Perimeter')
ax.set_zlabel('Circularity')
ax.view_init(elev=30, azim=60)
plt.show()

plt.imshow(R)
plt.show()


print('Cellule saine:',np.sum(data[:,2] > .98))
print('Cellule malade:',np.sum(data[:,2] <= .98))

